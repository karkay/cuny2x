{"version":3,"sources":["Decrement.js","ListContacts.js","App.js","serviceWorker.js","index.js"],"names":["button_style","margin","Decrement","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","decrement","original","state","num","setState","alert","numba","inherits","createClass","key","value","react_default","a","createElement","className","onClick","style","id","React","Component","ListContacts","contacts","listOfContacts","map","contact","ListContacts_ContactCard","name","mobNum","mobile","workNum","work","email","ContactCard","_React$Component2","_this2","mobileNum","contactCardStyle","border","borderRadius","padding","textAlign","background","App","Decrement_Decrement","ListContacts_ListContacts","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c8bd7ba.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n\n\nconst button_style = {\n\tmargin:\"20px\",\n}\n\nexport class Decrement extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tnum: props.numba\n\t\t}\n\t}\n\n\t decrement = () =>{\n\t\tlet original = this.state.num;\n\n\t\tif(original > 0){\n\t\t\tthis.setState({num: original-1});\n\t\t}else{\n\t\t\talert(\"Cannot be less than zero\");\n\t\t}\n\t}\n\n\trender(){\n\t\treturn <div className=\"decrement\">\n\t\t\t\t\t<button onClick={this.decrement} style={button_style} id =\"dec_button\">minus</button>\n\t\t\t\t\t<h1 id = \"count\">{this.state.num}</h1>\n\t\t\t\t</div>\n\t}\n};\n\nDecrement.propTypes = {\n\tnumba: PropTypes.number.isRequired,\n}","import React from 'react';\n\n\n\nexport class ListContacts extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcontacts: this.props.listOfContacts,\n\t\t}\n\t}\n\n\trender(){\n\t\t\n\t\t//console.log(this.props.listOfContacts);\n\t\treturn <div className = \"container\">\n\t\t\t{this.state.contacts.map(contact =>(<ContactCard name = {contact.name} \n\t\t\t\t\t\t\t\t\t\t\t\t\tkey ={contact.name} \n\t\t\t\t\t\t\t\t\t\t\t\t\tmobNum = {contact.mobile}\n\t\t\t\t\t\t\t\t\t\t\t\t\tworkNum = {contact.work}\n\t\t\t\t\t\t\t\t\t\t\t\t\temail = {contact.email}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>))}\n\t\t</div>\n\t}\n};\n\nexport class ContactCard extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tname: props.name,\n\t\t\tmobileNum: props.mobNum,\n\t\t\tworkNum: props.workNum,\n\t\t\temail: props.email,\n\t\t}\n\n\t\t/*setTimeout(this.defaultInfo.bind(this),1000))*/\n\t}\n\n\tdefaultInfo(){\n\t\tthis.setState({ \n\t\t\tmobileNum: \"555-555-5555\",\n\t\t\tworkNum: \"111-111-1111\",\n\t\t\temail: \"johndoe23@ecorp.com\",\n\t\t});\n\t}\n\n\trender(){\n\t\treturn <div className=\"container\" style = {contactCardStyle}>\n\t\t\t\n\t\t\t<h2>{this.state.name}</h2>\n\t\t\t<h4>Mobile Number: {this.state.mobileNum}</h4>\n\t\t\t<h4>Work Number: {this.state.workNum}</h4>\n\t\t\t<h4>Email: {this.state.email}</h4>\n\t\t</div>\n\t}\n};\n\nconst contactCardStyle = {\n\tborder: \"2px solid #000000\",\n\tmargin: \"40px\",\n\tborderRadius: \"20px\",\n\tpadding: \"5px\",\n\ttextAlign: \"center\",\n\tbackground: \"#ffffff\",\n\n\t\n\n}","import React, { Component } from 'react';\n\nimport './App.css';\nimport {Decrement} from './Decrement';\nimport {ListContacts} from './ListContacts';\n\n\n\n\nconst contacts = [\n  {\n    \"name\": \"Marissa Herman\",\n    \"mobile\": \"(881) 400-3789\",\n    \"work\": \"(810) 557-3423\",\n    \"email\": \"marissaherman@gracker.com\"\n  },\n  {\n    \"name\": \"Barker Spencer\",\n    \"mobile\": \"(987) 456-3405\",\n    \"work\": \"(866) 409-2049\",\n    \"email\": \"barkerspencer@gracker.com\"\n  },\n  {\n    \"name\": \"Tanya Newman\",\n    \"mobile\": \"(827) 521-3071\",\n    \"work\": \"(963) 544-3540\",\n    \"email\": \"tanyanewman@gracker.com\"\n  },\n  {\n    \"name\": \"Dee Knox\",\n    \"mobile\": \"(895) 483-3712\",\n    \"work\": \"(869) 450-3161\",\n    \"email\": \"deeknox@gracker.com\"\n  },\n\n];\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n      <Decrement numba = {5}/>\n      <ListContacts listOfContacts = {contacts}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n// ========================================\n\n\n\n\nReactDOM.render(\n\n  <App/>,\n  document.getElementById('root')\n);\n\n\n\n\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}